{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"angular-oauth2-oidc\";\nexport const authCodeFlowConfig = {\n  // Url of the Identity Provider\n  issuer: 'https://idsvr4.azurewebsites.net',\n  // URL of the SPA to redirect the user to after login\n  redirectUri: window.location.origin + '/auth-landing.html',\n  // The SPA's id. The SPA is registerd with this id at the auth-server\n  // clientId: 'server.code',\n  clientId: 'spa',\n  // Just needed if your auth server demands a secret. In general, this\n  // is a sign that the auth server is not configured with SPAs in mind\n  // and it might not enforce further best practices vital for security\n  // such applications.\n  // dummyClientSecret: 'secret',\n  responseType: 'code',\n  // set the scope for the permissions the client should request\n  // The first four are defined by OIDC.\n  // Important: Request offline_access to get a refresh token\n  // The api scope is a usecase specific one\n  scope: 'openid profile email offline_access api',\n  showDebugInformation: true\n};\nexport let AppComponent = /*#__PURE__*/(() => {\n  class AppComponent {\n    constructor(oauthService) {\n      this.oauthService = oauthService;\n      this.title = 'oauth-demo-app';\n    }\n\n    login() {\n      this.oauthService.configure(authCodeFlowConfig);\n      this.oauthService.initLoginFlowInPopup(); // const options = {height: 600, width: 500};\n      // window.open(\"./auth-init.html\", \"auth-init\", this.calculatePopupFeatures(options));\n    }\n\n    calculatePopupFeatures(options) {\n      // Specify an static height and width and calculate centered position\n      const height = options.height || 470;\n      const width = options.width || 500;\n      const left = window.screenLeft + (window.outerWidth - width) / 2;\n      const top = window.screenTop + (window.outerHeight - height) / 2;\n      return `location=no,toolbar=no,width=${width},height=${height},top=${top},left=${left}`;\n    }\n\n    logout() {}\n\n  }\n\n  AppComponent.ɵfac = function AppComponent_Factory(t) {\n    return new (t || AppComponent)(i0.ɵɵdirectiveInject(i1.OAuthService));\n  };\n\n  AppComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: AppComponent,\n    selectors: [[\"app-root\"]],\n    decls: 4,\n    vars: 0,\n    consts: [[2, \"width\", \"150px\", \"height\", \"40px\", \"margin\", \"50px\", 3, \"click\"]],\n    template: function AppComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"button\", 0);\n        i0.ɵɵlistener(\"click\", function AppComponent_Template_button_click_0_listener() {\n          return ctx.login();\n        });\n        i0.ɵɵtext(1, \"Login with SSO\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(2, \"button\", 0);\n        i0.ɵɵlistener(\"click\", function AppComponent_Template_button_click_2_listener() {\n          return ctx.logout();\n        });\n        i0.ɵɵtext(3, \"Logout\");\n        i0.ɵɵelementEnd();\n      }\n    },\n    styles: [\"\"]\n  });\n  return AppComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}