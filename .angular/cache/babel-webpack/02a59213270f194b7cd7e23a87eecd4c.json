{"ast":null,"code":"(function (root, factory) {\n  // Hack to make all exports of this module sha256 function object properties.\n  var exports = {};\n  factory(exports);\n  var sha256 = exports[\"default\"];\n\n  for (var k in exports) {\n    sha256[k] = exports[k];\n  }\n\n  if (typeof module === 'object' && typeof module.exports === 'object') {\n    module.exports = sha256;\n  } else if (typeof define === 'function' && define.amd) {\n    define(function () {\n      return sha256;\n    });\n  } else {\n    root.sha256 = sha256;\n  }\n})(this, function (exports) {\n  \"use strict\";\n\n  exports.__esModule = true; // SHA-256 (+ HMAC and PBKDF2) for JavaScript.\n  //\n  // Written in 2014-2016 by Dmitry Chestnykh.\n  // Public domain, no warranty.\n  //\n  // Functions (accept and return Uint8Arrays):\n  //\n  //   sha256(message) -> hash\n  //   sha256.hmac(key, message) -> mac\n  //   sha256.pbkdf2(password, salt, rounds, dkLen) -> dk\n  //\n  //  Classes:\n  //\n  //   new sha256.Hash()\n  //   new sha256.HMAC(key)\n  //\n\n  exports.digestLength = 32;\n  exports.blockSize = 64; // SHA-256 constants\n\n  var K = new Uint32Array([0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5, 0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174, 0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da, 0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967, 0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85, 0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070, 0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3, 0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2]);\n\n  function hashBlocks(w, v, p, pos, len) {\n    var a, b, c, d, e, f, g, h, u, i, j, t1, t2;\n\n    while (len >= 64) {\n      a = v[0];\n      b = v[1];\n      c = v[2];\n      d = v[3];\n      e = v[4];\n      f = v[5];\n      g = v[6];\n      h = v[7];\n\n      for (i = 0; i < 16; i++) {\n        j = pos + i * 4;\n        w[i] = (p[j] & 0xff) << 24 | (p[j + 1] & 0xff) << 16 | (p[j + 2] & 0xff) << 8 | p[j + 3] & 0xff;\n      }\n\n      for (i = 16; i < 64; i++) {\n        u = w[i - 2];\n        t1 = (u >>> 17 | u << 32 - 17) ^ (u >>> 19 | u << 32 - 19) ^ u >>> 10;\n        u = w[i - 15];\n        t2 = (u >>> 7 | u << 32 - 7) ^ (u >>> 18 | u << 32 - 18) ^ u >>> 3;\n        w[i] = (t1 + w[i - 7] | 0) + (t2 + w[i - 16] | 0);\n      }\n\n      for (i = 0; i < 64; i++) {\n        t1 = (((e >>> 6 | e << 32 - 6) ^ (e >>> 11 | e << 32 - 11) ^ (e >>> 25 | e << 32 - 25)) + (e & f ^ ~e & g) | 0) + (h + (K[i] + w[i] | 0) | 0) | 0;\n        t2 = ((a >>> 2 | a << 32 - 2) ^ (a >>> 13 | a << 32 - 13) ^ (a >>> 22 | a << 32 - 22)) + (a & b ^ a & c ^ b & c) | 0;\n        h = g;\n        g = f;\n        f = e;\n        e = d + t1 | 0;\n        d = c;\n        c = b;\n        b = a;\n        a = t1 + t2 | 0;\n      }\n\n      v[0] += a;\n      v[1] += b;\n      v[2] += c;\n      v[3] += d;\n      v[4] += e;\n      v[5] += f;\n      v[6] += g;\n      v[7] += h;\n      pos += 64;\n      len -= 64;\n    }\n\n    return pos;\n  } // Hash implements SHA256 hash algorithm.\n\n\n  var Hash =\n  /** @class */\n  function () {\n    function Hash() {\n      this.digestLength = exports.digestLength;\n      this.blockSize = exports.blockSize; // Note: Int32Array is used instead of Uint32Array for performance reasons.\n\n      this.state = new Int32Array(8); // hash state\n\n      this.temp = new Int32Array(64); // temporary state\n\n      this.buffer = new Uint8Array(128); // buffer for data to hash\n\n      this.bufferLength = 0; // number of bytes in buffer\n\n      this.bytesHashed = 0; // number of total bytes hashed\n\n      this.finished = false; // indicates whether the hash was finalized\n\n      this.reset();\n    } // Resets hash state making it possible\n    // to re-use this instance to hash other data.\n\n\n    Hash.prototype.reset = function () {\n      this.state[0] = 0x6a09e667;\n      this.state[1] = 0xbb67ae85;\n      this.state[2] = 0x3c6ef372;\n      this.state[3] = 0xa54ff53a;\n      this.state[4] = 0x510e527f;\n      this.state[5] = 0x9b05688c;\n      this.state[6] = 0x1f83d9ab;\n      this.state[7] = 0x5be0cd19;\n      this.bufferLength = 0;\n      this.bytesHashed = 0;\n      this.finished = false;\n      return this;\n    }; // Cleans internal buffers and re-initializes hash state.\n\n\n    Hash.prototype.clean = function () {\n      for (var i = 0; i < this.buffer.length; i++) {\n        this.buffer[i] = 0;\n      }\n\n      for (var i = 0; i < this.temp.length; i++) {\n        this.temp[i] = 0;\n      }\n\n      this.reset();\n    }; // Updates hash state with the given data.\n    //\n    // Optionally, length of the data can be specified to hash\n    // fewer bytes than data.length.\n    //\n    // Throws error when trying to update already finalized hash:\n    // instance must be reset to use it again.\n\n\n    Hash.prototype.update = function (data, dataLength) {\n      if (dataLength === void 0) {\n        dataLength = data.length;\n      }\n\n      if (this.finished) {\n        throw new Error(\"SHA256: can't update because hash was finished.\");\n      }\n\n      var dataPos = 0;\n      this.bytesHashed += dataLength;\n\n      if (this.bufferLength > 0) {\n        while (this.bufferLength < 64 && dataLength > 0) {\n          this.buffer[this.bufferLength++] = data[dataPos++];\n          dataLength--;\n        }\n\n        if (this.bufferLength === 64) {\n          hashBlocks(this.temp, this.state, this.buffer, 0, 64);\n          this.bufferLength = 0;\n        }\n      }\n\n      if (dataLength >= 64) {\n        dataPos = hashBlocks(this.temp, this.state, data, dataPos, dataLength);\n        dataLength %= 64;\n      }\n\n      while (dataLength > 0) {\n        this.buffer[this.bufferLength++] = data[dataPos++];\n        dataLength--;\n      }\n\n      return this;\n    }; // Finalizes hash state and puts hash into out.\n    //\n    // If hash was already finalized, puts the same value.\n\n\n    Hash.prototype.finish = function (out) {\n      if (!this.finished) {\n        var bytesHashed = this.bytesHashed;\n        var left = this.bufferLength;\n        var bitLenHi = bytesHashed / 0x20000000 | 0;\n        var bitLenLo = bytesHashed << 3;\n        var padLength = bytesHashed % 64 < 56 ? 64 : 128;\n        this.buffer[left] = 0x80;\n\n        for (var i = left + 1; i < padLength - 8; i++) {\n          this.buffer[i] = 0;\n        }\n\n        this.buffer[padLength - 8] = bitLenHi >>> 24 & 0xff;\n        this.buffer[padLength - 7] = bitLenHi >>> 16 & 0xff;\n        this.buffer[padLength - 6] = bitLenHi >>> 8 & 0xff;\n        this.buffer[padLength - 5] = bitLenHi >>> 0 & 0xff;\n        this.buffer[padLength - 4] = bitLenLo >>> 24 & 0xff;\n        this.buffer[padLength - 3] = bitLenLo >>> 16 & 0xff;\n        this.buffer[padLength - 2] = bitLenLo >>> 8 & 0xff;\n        this.buffer[padLength - 1] = bitLenLo >>> 0 & 0xff;\n        hashBlocks(this.temp, this.state, this.buffer, 0, padLength);\n        this.finished = true;\n      }\n\n      for (var i = 0; i < 8; i++) {\n        out[i * 4 + 0] = this.state[i] >>> 24 & 0xff;\n        out[i * 4 + 1] = this.state[i] >>> 16 & 0xff;\n        out[i * 4 + 2] = this.state[i] >>> 8 & 0xff;\n        out[i * 4 + 3] = this.state[i] >>> 0 & 0xff;\n      }\n\n      return this;\n    }; // Returns the final hash digest.\n\n\n    Hash.prototype.digest = function () {\n      var out = new Uint8Array(this.digestLength);\n      this.finish(out);\n      return out;\n    }; // Internal function for use in HMAC for optimization.\n\n\n    Hash.prototype._saveState = function (out) {\n      for (var i = 0; i < this.state.length; i++) {\n        out[i] = this.state[i];\n      }\n    }; // Internal function for use in HMAC for optimization.\n\n\n    Hash.prototype._restoreState = function (from, bytesHashed) {\n      for (var i = 0; i < this.state.length; i++) {\n        this.state[i] = from[i];\n      }\n\n      this.bytesHashed = bytesHashed;\n      this.finished = false;\n      this.bufferLength = 0;\n    };\n\n    return Hash;\n  }();\n\n  exports.Hash = Hash; // HMAC implements HMAC-SHA256 message authentication algorithm.\n\n  var HMAC =\n  /** @class */\n  function () {\n    function HMAC(key) {\n      this.inner = new Hash();\n      this.outer = new Hash();\n      this.blockSize = this.inner.blockSize;\n      this.digestLength = this.inner.digestLength;\n      var pad = new Uint8Array(this.blockSize);\n\n      if (key.length > this.blockSize) {\n        new Hash().update(key).finish(pad).clean();\n      } else {\n        for (var i = 0; i < key.length; i++) {\n          pad[i] = key[i];\n        }\n      }\n\n      for (var i = 0; i < pad.length; i++) {\n        pad[i] ^= 0x36;\n      }\n\n      this.inner.update(pad);\n\n      for (var i = 0; i < pad.length; i++) {\n        pad[i] ^= 0x36 ^ 0x5c;\n      }\n\n      this.outer.update(pad);\n      this.istate = new Uint32Array(8);\n      this.ostate = new Uint32Array(8);\n\n      this.inner._saveState(this.istate);\n\n      this.outer._saveState(this.ostate);\n\n      for (var i = 0; i < pad.length; i++) {\n        pad[i] = 0;\n      }\n    } // Returns HMAC state to the state initialized with key\n    // to make it possible to run HMAC over the other data with the same\n    // key without creating a new instance.\n\n\n    HMAC.prototype.reset = function () {\n      this.inner._restoreState(this.istate, this.inner.blockSize);\n\n      this.outer._restoreState(this.ostate, this.outer.blockSize);\n\n      return this;\n    }; // Cleans HMAC state.\n\n\n    HMAC.prototype.clean = function () {\n      for (var i = 0; i < this.istate.length; i++) {\n        this.ostate[i] = this.istate[i] = 0;\n      }\n\n      this.inner.clean();\n      this.outer.clean();\n    }; // Updates state with provided data.\n\n\n    HMAC.prototype.update = function (data) {\n      this.inner.update(data);\n      return this;\n    }; // Finalizes HMAC and puts the result in out.\n\n\n    HMAC.prototype.finish = function (out) {\n      if (this.outer.finished) {\n        this.outer.finish(out);\n      } else {\n        this.inner.finish(out);\n        this.outer.update(out, this.digestLength).finish(out);\n      }\n\n      return this;\n    }; // Returns message authentication code.\n\n\n    HMAC.prototype.digest = function () {\n      var out = new Uint8Array(this.digestLength);\n      this.finish(out);\n      return out;\n    };\n\n    return HMAC;\n  }();\n\n  exports.HMAC = HMAC; // Returns SHA256 hash of data.\n\n  function hash(data) {\n    var h = new Hash().update(data);\n    var digest = h.digest();\n    h.clean();\n    return digest;\n  }\n\n  exports.hash = hash; // Function hash is both available as module.hash and as default export.\n\n  exports[\"default\"] = hash; // Returns HMAC-SHA256 of data under the key.\n\n  function hmac(key, data) {\n    var h = new HMAC(key).update(data);\n    var digest = h.digest();\n    h.clean();\n    return digest;\n  }\n\n  exports.hmac = hmac; // Fills hkdf buffer like this:\n  // T(1) = HMAC-Hash(PRK, T(0) | info | 0x01)\n\n  function fillBuffer(buffer, hmac, info, counter) {\n    // Counter is a byte value: check if it overflowed.\n    var num = counter[0];\n\n    if (num === 0) {\n      throw new Error(\"hkdf: cannot expand more\");\n    } // Prepare HMAC instance for new data with old key.\n\n\n    hmac.reset(); // Hash in previous output if it was generated\n    // (i.e. counter is greater than 1).\n\n    if (num > 1) {\n      hmac.update(buffer);\n    } // Hash in info if it exists.\n\n\n    if (info) {\n      hmac.update(info);\n    } // Hash in the counter.\n\n\n    hmac.update(counter); // Output result to buffer and clean HMAC instance.\n\n    hmac.finish(buffer); // Increment counter inside typed array, this works properly.\n\n    counter[0]++;\n  }\n\n  var hkdfSalt = new Uint8Array(exports.digestLength); // Filled with zeroes.\n\n  function hkdf(key, salt, info, length) {\n    if (salt === void 0) {\n      salt = hkdfSalt;\n    }\n\n    if (length === void 0) {\n      length = 32;\n    }\n\n    var counter = new Uint8Array([1]); // HKDF-Extract uses salt as HMAC key, and key as data.\n\n    var okm = hmac(salt, key); // Initialize HMAC for expanding with extracted key.\n    // Ensure no collisions with `hmac` function.\n\n    var hmac_ = new HMAC(okm); // Allocate buffer.\n\n    var buffer = new Uint8Array(hmac_.digestLength);\n    var bufpos = buffer.length;\n    var out = new Uint8Array(length);\n\n    for (var i = 0; i < length; i++) {\n      if (bufpos === buffer.length) {\n        fillBuffer(buffer, hmac_, info, counter);\n        bufpos = 0;\n      }\n\n      out[i] = buffer[bufpos++];\n    }\n\n    hmac_.clean();\n    buffer.fill(0);\n    counter.fill(0);\n    return out;\n  }\n\n  exports.hkdf = hkdf; // Derives a key from password and salt using PBKDF2-HMAC-SHA256\n  // with the given number of iterations.\n  //\n  // The number of bytes returned is equal to dkLen.\n  //\n  // (For better security, avoid dkLen greater than hash length - 32 bytes).\n\n  function pbkdf2(password, salt, iterations, dkLen) {\n    var prf = new HMAC(password);\n    var len = prf.digestLength;\n    var ctr = new Uint8Array(4);\n    var t = new Uint8Array(len);\n    var u = new Uint8Array(len);\n    var dk = new Uint8Array(dkLen);\n\n    for (var i = 0; i * len < dkLen; i++) {\n      var c = i + 1;\n      ctr[0] = c >>> 24 & 0xff;\n      ctr[1] = c >>> 16 & 0xff;\n      ctr[2] = c >>> 8 & 0xff;\n      ctr[3] = c >>> 0 & 0xff;\n      prf.reset();\n      prf.update(salt);\n      prf.update(ctr);\n      prf.finish(u);\n\n      for (var j = 0; j < len; j++) {\n        t[j] = u[j];\n      }\n\n      for (var j = 2; j <= iterations; j++) {\n        prf.reset();\n        prf.update(u).finish(u);\n\n        for (var k = 0; k < len; k++) {\n          t[k] ^= u[k];\n        }\n      }\n\n      for (var j = 0; j < len && i * len + j < dkLen; j++) {\n        dk[i * len + j] = t[j];\n      }\n    }\n\n    for (var i = 0; i < len; i++) {\n      t[i] = u[i] = 0;\n    }\n\n    for (var i = 0; i < 4; i++) {\n      ctr[i] = 0;\n    }\n\n    prf.clean();\n    return dk;\n  }\n\n  exports.pbkdf2 = pbkdf2;\n});","map":null,"metadata":{},"sourceType":"script"}